{"version":3,"file":"public/javascripts/app.js","sources":["app/application.coffee","app/collections/bookmark_collection.coffee","app/initialize.coffee","app/lib/app_helpers.coffee","app/lib/base_view.coffee","app/lib/view_collection.coffee","app/models/bookmark_model.coffee","app/router.coffee","app/views/bookmark_view.coffee","app/views/bookmarks_view.coffee","app/views/templates/bookmark.jade","app/views/templates/home.jade"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhjBA;;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/BA;;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArCA;;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzEA;;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA","sourcesContent":["module.exports =\n\n    initialize: ->\n        # This will be tackled in another tutorial\n        #SocketListener = require '../lib/socket_listener'\n\n        # Routing management, this will be tackled in another tutorial\n        Router = require 'router'\n        @router = new Router()\n        Backbone.history.start()\n\n        # Makes this object immuable. Don't bother with that.\n        Object.freeze this if typeof Object.freeze is 'function'","Bookmark = require '../models/bookmark_model'\n\nmodule.exports = class BookmarkCollection extends Backbone.Collection\n\n    # Model that will be contained inside the collection.\n    model: Bookmark\n\n    # This is where ajax requests the backend.\n    url: 'bookmarks'","app = require 'application'\n\n# The function called from index.html\n$ ->\n    require 'lib/app_helpers'\n\n    app.initialize()","(() ->\n    # IIFE to avoid collisions with other variables\n    (->\n        # Make it safe to do console.log() always.\n        console = window.console = window.console or {}\n        method = undefined\n        dummy = ->\n        methods = ('assert,count,debug,dir,dirxml,error,exception,\n                   group,groupCollapsed,groupEnd,info,log,markTimeline,\n                   profile,profileEnd,time,timeEnd,trace,warn').split ','\n\n        console[method] = console[method] or dummy while method = methods.pop()\n    )()\n)()\n","module.exports = class BaseView extends Backbone.View\n\n    template: ->\n\n    initialize: ->\n\n    getRenderData: ->\n        model: @model?.toJSON()\n\n    render: ->\n        @beforeRender()\n        @$el.html @template(@getRenderData())\n        @afterRender()\n        @\n\n    beforeRender: ->\n\n    afterRender: ->\n\n    destroy: ->\n        @undelegateEvents()\n        @$el.removeData().unbind()\n        @remove()\n        Backbone.View::remove.call @\n","BaseView = require 'lib/base_view'\n\n# View that display a collection of subitems\n# used to DRY views\n# Usage : new ViewCollection(collection:collection)\n# Automatically populate itself by creating a itemView for each item\n# in its collection\n\n# can use a template that will be displayed alongside the itemViews\n\n# itemView       : the Backbone.View to be used for items\n# itemViewOptions : the options that will be passed to itemViews\n# collectionEl : the DOM element's selector where the itemViews will\n#                be displayed. Automatically falls back to el if null\n\nmodule.exports = class ViewCollection extends BaseView\n\n    itemview: null\n\n    views: {}\n\n    template: -> ''\n\n    itemViewOptions: ->\n\n    collectionEl: null\n\n    # add 'empty' class to view when there is no subview\n    onChange: ->\n        @$el.toggleClass 'empty', _.size(@views) is 0\n\n    # can be overriden if we want to place the subviews somewhere else\n    appendView: (view) ->\n        @$collectionEl.append view.el\n\n    # bind listeners to the collection\n    initialize: ->\n        super\n        @views = {}\n        @listenTo @collection, \"reset\",   @onReset\n        @listenTo @collection, \"add\",     @addItem\n        @listenTo @collection, \"remove\",  @removeItem\n\n        if not @collectionEl?\n            collectionEl = el\n\n    # if we have views before a render call, we detach them\n    render: ->\n        view.$el.detach() for id, view of @views\n        super\n\n    # after render, we reattach the views\n    afterRender: ->\n        @$collectionEl = $(@collectionEl)\n        @appendView view.$el for id, view of @views\n        @onReset @collection\n        @onChange @views\n\n    # destroy all sub views before remove\n    remove: ->\n        @onReset []\n        super\n\n    # event listener for reset\n    onReset: (newcollection) ->\n        view.remove() for id, view of @views\n        newcollection.forEach @addItem\n\n    # event listeners for add\n    addItem: (model) =>\n        options = _.extend {}, {model: model}, @itemViewOptions(model)\n        view = new @itemview(options)\n        @views[model.cid] = view.render()\n        @appendView view\n        @onChange @views\n\n    # event listeners for remove\n    removeItem: (model) =>\n        @views[model.cid].remove()\n        delete @views[model.cid]\n\n        @onChange @views","module.exports = class Bookmark extends Backbone.Model\n\n    # This field is required to know from where data should be loaded.\n    # We'll cover it better in the backend part.\n    rootUrl: 'bookmarks'\n","BookmarksView = require 'views/bookmarks_view'\nBookmarkCollection = require 'collections/bookmark_collection'\n\n# We'll cover the router in another tutorial.\nmodule.exports = class Router extends Backbone.Router\n\n    routes:\n        '': 'main'\n\n    main: ->\n        # We create the collection here but do it where it fits the better for\n        # your case.\n        mainView = new BookmarksView\n                            collection: new BookmarkCollection()\n        mainView.render()","BaseView = require '../lib/base_view'\n\nmodule.exports = class BookmarkView extends BaseView\n\n    # This time the html component does not exist in the dom.\n    # So, we don't refer to a DOM element, we just give\n    # class and tag names to let backbone build the component.\n    className: 'bookmark'\n    tagName: 'div'\n\n    # The template render the bookmark with data given by the model\n    template: require './templates/bookmark'\n\n    # Register event\n    events:\n        'click .delete-button': 'onDeleteClicked'\n\n    onDeleteClicked: ->\n        @$('.delete-button').html \"deleting...\"\n        @model.destroy\n          error: ->\n                alert \"Server error occured, bookmark was not deleted.\"\n                @$('.delete-button').html \"delete\"","# This is where we import required modules\nViewCollection = require '../lib/view_collection'\nBookmarkView  = require './bookmark_view'\n\nmodule.exports = class BookmarksView extends ViewCollection\n\n    # This is the template we wrote above\n    template: require('./templates/home')\n\n    # This is the class that will be used to create view needed to render models\n    itemview: BookmarkView\n\n    # Use a CSS selector to connect your view to a DOM element already rendered.\n    el: 'body.application'\n\n    # DOM selector to connect the already rendered DOM element where you want to\n    # display the subviews. Not mandatory, default is 'el'\n    collectionEl: '#bookmark-list'\n\n    events:\n        'click .create-button': 'onCreateClicked'\n\n    # After DOM elements have been created\n    afterRender: ->\n\n        # Must be called first\n        super()\n\n        # Show loading indicator.\n        @$collectionEl.html '<em>loading...</em>'\n\n        # Retrieves the data from the database\n        @collection.fetch\n            success: (collection, response, option) =>\n                @$collectionEl.find('em').remove()\n            error: =>\n                msg = \"Bookmarks couldn't be retrieved due to a server error.\"\n                @$collectionEl.find('em').html msg\n\n\n     onCreateClicked: =>\n          # Grab field data\n          title = $('.title-field').val()\n          url = $('.url-field').val()\n\n          # Validate that data are ok.\n          if title?.length > 0 and url?.length > 0\n\n            bookmark =\n                    title: title\n                    url: url\n            # Save it through collection, this will automatically add it to the\n            # current list when request finishes.\n            @collection.create bookmark,\n                success: ->\n                    alert \"Bookmark added\"\n                    $('.title-field').val ''\n                    $('.url-field').val ''\n                error: -> alert \"Server error occured, Bookmark was not saved\"\n          else\n              alert 'Both fields are required'\n",".title #{model.title}\n.url\n    a(href=\"#{model.url}\") #{model.url}\nbutton.delete-button delete","#content\n    h1 My bookmarks\n    #create-bookmark\n        input.title-field(placeholder=\"title\")\n        input.url-field(placeholder=\"url\")\n        button(type=\"button\").btn.create-button create\n    div#bookmark-list"]}